@page "/new-asset"
@page "/asset/{id:guid}"

@inject IAssetServices AssetServices
@inject IAssetTypeServices AssetTypeServices
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>@_title</PageTitle>

<h3>@_title</h3>

@if (_assetTypes == null || AssetModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@AssetModel" FormName="editAsset" OnValidSubmit="HandleValidAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="AssetModel.Name" />
            <ValidationMessage For="@(() => AssetModel.Name)" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="AssetModel.Description" />
            <ValidationMessage For="@(() => AssetModel.Description)" />
        </div>

        <div class="mb-3">
            <label for="assetType" class="form-label">Asset Type</label>
            <InputSelect id="assetType" class="form-select" @bind-Value="AssetModel.AssetTypeId">
                @foreach (var assetType in _assetTypes)
                {
                    <option value="@assetType.Id">@assetType.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => AssetModel.AssetTypeId)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <a class="btn btn-secondary" role="button" href="/assets">Cancel</a>
    </EditForm>

}

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [SupplyParameterFromForm]
    private AssetModel? AssetModel { get; set; }

    private List<AssetTypeModel>? _assetTypes;

    private string _title = string.Empty;

    private readonly CancellationTokenSource _cts = new();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AssetModel is not null)
        {
            return;
        }

        if (Id.HasValue)
        {
            var asset = await AssetServices.GetByIdAsync(Id.Value, _cts.Token);

            _title = $"Edit Asset: {asset.Name}";

            AssetModel = new AssetModel
            {
                Id = asset.Id,
                AssetTypeId = asset.AssetTypeId,
                Name = asset.Name,
                Description = asset.Description
            };
        }
        else
        {
            AssetModel = new AssetModel
            {
                Name = string.Empty,
                AssetTypeId = null
            };

            _title = "New Asset";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _assetTypes = await AssetTypeServices.GetAllAsync(_cts.Token);
        _assetTypes.Insert(0, new AssetTypeModel { Id = null, Name = "Select Asset Type..." });
    }

    private async Task HandleValidAsync()
    {
        ArgumentNullException.ThrowIfNull(AssetModel);

        if (AssetModel.Id is null)
        {
            await AssetServices.CreateAsync(AssetModel, _cts.Token);
        }
        else
        {
            await AssetServices.UpdateAsync(AssetModel, _cts.Token);
        }

        NavigationManager.NavigateTo("/assets");
    }
}
